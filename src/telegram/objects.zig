const std = @import("std");

const Allocator = std.mem.Allocator;
const Value = std.json.Value;
const ParseOptions = std.json.ParseOptions;

pub const integer_or_string = union(enum) {
    integer: i64,
    string: []const u8,

    pub fn jsonParse(allocator: Allocator, source: anytype, options: ParseOptions) !@This() {
        const value = try Value.jsonParse(allocator, source, options);
        return switch (value) {
            .string => .{ .string = value.string },
            .integer => .{ .integer = value.integer },
            else => error.UnexpectedToken,
        };
    }
};

test "union parsing" {
    const test_allocator = std.testing.allocator;

    const parsed_integer = try std.json.parseFromSlice(
        integer_or_string,
        test_allocator,
        "-2333",
        .{},
    );
    defer parsed_integer.deinit();
    try std.testing.expect(parsed_integer.value.integer == -2333);

    const parsed_string = try std.json.parseFromSlice(
        integer_or_string,
        test_allocator,
        \\"hello \"world\""
    ,
        .{},
    );
    defer parsed_string.deinit();
    try std.testing.expect(std.mem.eql(u8, parsed_string.value.string, "hello \"world\""));
}

// TODO: implement these types.

pub const MaybeInaccessibleMessage = Value;
pub const MessageOrigin = Value;
pub const PaidMedia = Value;
pub const BackgroundFill = Value;
pub const BackgroundType = Value;
pub const ForumTopicClosed = Value;
pub const ForumTopicReopened = Value;
pub const GeneralForumTopicHidden = Value;
pub const GeneralForumTopicUnhidden = Value;
pub const VideoChatStarted = Value;
pub const ChatMember = Value;
pub const ReactionType = Value;
pub const BotCommandScope = Value;
pub const MenuButton = Value;
pub const ChatBoostSource = Value;
pub const InputMedia = Value;
pub const InputFile = Value;
pub const InputPaidMedia = Value;

pub const Sticker = Value;
pub const Game = Value;
pub const CallbackGame = Value;
pub const Invoice = Value;
pub const SuccessfulPayment = Value;
pub const RefundedPayment = Value;

pub const InlineQuery = Value;
pub const ChosenInlineResult = Value;
pub const ShippingQuery = Value;
pub const PreCheckoutQuery = Value;
pub const PaidMediaPurchased = Value;

// -------------------------------------------------------
// These types are generated by script.
// See https://github.com/umoho/tg-bot-api-zig-struct-gen
// -------------------------------------------------------

/// This object represents an incoming update.At most one of the optional parameters can be present in any given update.
pub const Update = struct {
    /// The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
    update_id: i64,
    /// Optional. New incoming message of any kind - text, photo, sticker, etc.
    message: ?Message = null,
    /// Optional. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.
    edited_message: ?Message = null,
    /// Optional. New incoming channel post of any kind - text, photo, sticker, etc.
    channel_post: ?Message = null,
    /// Optional. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.
    edited_channel_post: ?Message = null,
    /// Optional. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot
    business_connection: ?BusinessConnection = null,
    /// Optional. New message from a connected business account
    business_message: ?Message = null,
    /// Optional. New version of a message from a connected business account
    edited_business_message: ?Message = null,
    /// Optional. Messages were deleted from a connected business account
    deleted_business_messages: ?BusinessMessagesDeleted = null,
    /// Optional. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify "message_reaction" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots.
    message_reaction: ?MessageReactionUpdated = null,
    /// Optional. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify "message_reaction_count" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes.
    message_reaction_count: ?MessageReactionCountUpdated = null,
    /// Optional. New incoming inline query
    inline_query: ?InlineQuery = null,
    /// Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.
    chosen_inline_result: ?ChosenInlineResult = null,
    /// Optional. New incoming callback query
    callback_query: ?CallbackQuery = null,
    /// Optional. New incoming shipping query. Only for invoices with flexible price
    shipping_query: ?ShippingQuery = null,
    /// Optional. New incoming pre-checkout query. Contains full information about checkout
    pre_checkout_query: ?PreCheckoutQuery = null,
    /// Optional. A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat
    purchased_paid_media: ?PaidMediaPurchased = null,
    /// Optional. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot
    poll: ?Poll = null,
    /// Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.
    poll_answer: ?PollAnswer = null,
    /// Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.
    my_chat_member: ?ChatMemberUpdated = null,
    /// Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify "chat_member" in the list of allowed_updates to receive these updates.
    chat_member: ?ChatMemberUpdated = null,
    /// Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates.
    chat_join_request: ?ChatJoinRequest = null,
    /// Optional. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates.
    chat_boost: ?ChatBoostUpdated = null,
    /// Optional. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates.
    removed_chat_boost: ?ChatBoostRemoved = null,
};

/// Describes the current status of a webhook.
pub const WebhookInfo = struct {
    /// Webhook URL, may be empty if webhook is not set up
    url: []u8,
    /// True, if a custom certificate was provided for webhook certificate checks
    has_custom_certificate: bool,
    /// Number of updates awaiting delivery
    pending_update_count: i64,
    /// Optional. Currently used webhook IP address
    ip_address: ?[]u8 = null,
    /// Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook
    last_error_date: ?i64 = null,
    /// Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
    last_error_message: ?[]u8 = null,
    /// Optional. Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters
    last_synchronization_error_date: ?i64 = null,
    /// Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
    max_connections: ?i64 = null,
    /// Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member
    allowed_updates: ?[][]u8 = null,
};

/// This object represents a Telegram user or bot.
pub const User = struct {
    /// Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
    id: i64,
    /// True, if this user is a bot
    is_bot: bool,
    /// User's or bot's first name
    first_name: []u8,
    /// Optional. User's or bot's last name
    last_name: ?[]u8 = null,
    /// Optional. User's or bot's username
    username: ?[]u8 = null,
    /// Optional. IETF language tag of the user's language
    language_code: ?[]u8 = null,
    /// Optional. True, if this user is a Telegram Premium user
    is_premium: ?@TypeOf(true) = null,
    /// Optional. True, if this user added the bot to the attachment menu
    added_to_attachment_menu: ?@TypeOf(true) = null,
    /// Optional. True, if the bot can be invited to groups. Returned only in getMe.
    can_join_groups: ?bool = null,
    /// Optional. True, if privacy mode is disabled for the bot. Returned only in getMe.
    can_read_all_group_messages: ?bool = null,
    /// Optional. True, if the bot supports inline queries. Returned only in getMe.
    supports_inline_queries: ?bool = null,
    /// Optional. True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe.
    can_connect_to_business: ?bool = null,
    /// Optional. True, if the bot has a main Web App. Returned only in getMe.
    has_main_web_app: ?bool = null,
};

/// This object represents a chat.
pub const Chat = struct {
    /// Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    id: i64,
    /// Type of the chat, can be either “private”, “group”, “supergroup” or “channel”
    type: []u8,
    /// Optional. Title, for supergroups, channels and group chats
    title: ?[]u8 = null,
    /// Optional. Username, for private chats, supergroups and channels if available
    username: ?[]u8 = null,
    /// Optional. First name of the other party in a private chat
    first_name: ?[]u8 = null,
    /// Optional. Last name of the other party in a private chat
    last_name: ?[]u8 = null,
    /// Optional. True, if the supergroup chat is a forum (has topics enabled)
    is_forum: ?@TypeOf(true) = null,
};

/// This object contains full information about a chat.
pub const ChatFullInfo = struct {
    /// Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    id: i64,
    /// Type of the chat, can be either “private”, “group”, “supergroup” or “channel”
    type: []u8,
    /// Optional. Title, for supergroups, channels and group chats
    title: ?[]u8 = null,
    /// Optional. Username, for private chats, supergroups and channels if available
    username: ?[]u8 = null,
    /// Optional. First name of the other party in a private chat
    first_name: ?[]u8 = null,
    /// Optional. Last name of the other party in a private chat
    last_name: ?[]u8 = null,
    /// Optional. True, if the supergroup chat is a forum (has topics enabled)
    is_forum: ?@TypeOf(true) = null,
    /// Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See accent colors for more details.
    accent_color_id: i64,
    /// The maximum number of reactions that can be set on a message in the chat
    max_reaction_count: i64,
    /// Optional. Chat photo
    photo: ?ChatPhoto = null,
    /// Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels
    active_usernames: ?[][]u8 = null,
    /// Optional. For private chats, the date of birth of the user
    birthdate: ?Birthdate = null,
    /// Optional. For private chats with business accounts, the intro of the business
    business_intro: ?BusinessIntro = null,
    /// Optional. For private chats with business accounts, the location of the business
    business_location: ?BusinessLocation = null,
    /// Optional. For private chats with business accounts, the opening hours of the business
    business_opening_hours: ?BusinessOpeningHours = null,
    /// Optional. For private chats, the personal channel of the user
    personal_chat: ?Chat = null,
    /// Optional. List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed.
    available_reactions: ?[]ReactionType = null,
    /// Optional. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background
    background_custom_emoji_id: ?[]u8 = null,
    /// Optional. Identifier of the accent color for the chat's profile background. See profile accent colors for more details.
    profile_accent_color_id: ?i64 = null,
    /// Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background
    profile_background_custom_emoji_id: ?[]u8 = null,
    /// Optional. Custom emoji identifier of the emoji status of the chat or the other party in a private chat
    emoji_status_custom_emoji_id: ?[]u8 = null,
    /// Optional. Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any
    emoji_status_expiration_date: ?i64 = null,
    /// Optional. Bio of the other party in a private chat
    bio: ?[]u8 = null,
    /// Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user
    has_private_forwards: ?@TypeOf(true) = null,
    /// Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat
    has_restricted_voice_and_video_messages: ?@TypeOf(true) = null,
    /// Optional. True, if users need to join the supergroup before they can send messages
    join_to_send_messages: ?@TypeOf(true) = null,
    /// Optional. True, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators
    join_by_request: ?@TypeOf(true) = null,
    /// Optional. Description, for groups, supergroups and channel chats
    description: ?[]u8 = null,
    /// Optional. Primary invite link, for groups, supergroups and channel chats
    invite_link: ?[]u8 = null,
    /// Optional. The most recent pinned message (by sending date)
    pinned_message: ?Message = null,
    /// Optional. Default chat member permissions, for groups and supergroups
    permissions: ?ChatPermissions = null,
    /// Optional. True, if gifts can be sent to the chat
    can_send_gift: ?@TypeOf(true) = null,
    /// Optional. True, if paid media messages can be sent or forwarded to the channel chat. The field is available only for channel chats.
    can_send_paid_media: ?@TypeOf(true) = null,
    /// Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds
    slow_mode_delay: ?i64 = null,
    /// Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions
    unrestrict_boost_count: ?i64 = null,
    /// Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds
    message_auto_delete_time: ?i64 = null,
    /// Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.
    has_aggressive_anti_spam_enabled: ?@TypeOf(true) = null,
    /// Optional. True, if non-administrators can only get the list of bots and administrators in the chat
    has_hidden_members: ?@TypeOf(true) = null,
    /// Optional. True, if messages from the chat can't be forwarded to other chats
    has_protected_content: ?@TypeOf(true) = null,
    /// Optional. True, if new chat members will have access to old messages; available only to chat administrators
    has_visible_history: ?@TypeOf(true) = null,
    /// Optional. For supergroups, name of the group sticker set
    sticker_set_name: ?[]u8 = null,
    /// Optional. True, if the bot can change the group sticker set
    can_set_sticker_set: ?@TypeOf(true) = null,
    /// Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.
    custom_emoji_sticker_set_name: ?[]u8 = null,
    /// Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
    linked_chat_id: ?i64 = null,
    /// Optional. For supergroups, the location to which the supergroup is connected
    location: ?ChatLocation = null,
};

/// This object represents a message.
pub const Message = struct {
    /// Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent
    message_id: i64,
    /// Optional. Unique identifier of a message thread to which the message belongs; for supergroups only
    message_thread_id: ?i64 = null,
    /// Optional. Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats
    from: ?User = null,
    /// Optional. Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel's discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field from contains a fake sender user in non-channel chats.
    sender_chat: ?Chat = null,
    /// Optional. If the sender of the message boosted the chat, the number of boosts added by the user
    sender_boost_count: ?i64 = null,
    /// Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.
    sender_business_bot: ?User = null,
    /// Date the message was sent in Unix time. It is always a positive number, representing a valid date.
    date: i64,
    /// Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.
    business_connection_id: ?[]u8 = null,
    /// Chat the message belongs to
    chat: Chat,
    /// Optional. Information about the original message for forwarded messages
    forward_origin: ?MessageOrigin = null,
    /// Optional. True, if the message is sent to a forum topic
    is_topic_message: ?@TypeOf(true) = null,
    /// Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group
    is_automatic_forward: ?@TypeOf(true) = null,
    /// Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
    reply_to_message: ?*Message = null,
    /// Optional. Information about the message that is being replied to, which may come from another chat or forum topic
    external_reply: ?ExternalReplyInfo = null,
    /// Optional. For replies that quote part of the original message, the quoted part of the message
    quote: ?TextQuote = null,
    /// Optional. For replies to a story, the original story
    reply_to_story: ?std.json.Value = null,
    /// Optional. Bot through which the message was sent
    via_bot: ?User = null,
    /// Optional. Date the message was last edited in Unix time
    edit_date: ?i64 = null,
    /// Optional. True, if the message can't be forwarded
    has_protected_content: ?@TypeOf(true) = null,
    /// Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message
    is_from_offline: ?@TypeOf(true) = null,
    /// Optional. The unique identifier of a media message group this message belongs to
    media_group_id: ?[]u8 = null,
    /// Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
    author_signature: ?[]u8 = null,
    /// Optional. For text messages, the actual UTF-8 text of the message
    text: ?[]u8 = null,
    /// Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
    entities: ?[]MessageEntity = null,
    /// Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed
    link_preview_options: ?LinkPreviewOptions = null,
    /// Optional. Unique identifier of the message effect added to the message
    effect_id: ?[]u8 = null,
    /// Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set
    animation: ?Animation = null,
    /// Optional. Message is an audio file, information about the file
    audio: ?Audio = null,
    /// Optional. Message is a general file, information about the file
    document: ?Document = null,
    /// Optional. Message contains paid media; information about the paid media
    paid_media: ?PaidMediaInfo = null,
    /// Optional. Message is a photo, available sizes of the photo
    photo: ?[]PhotoSize = null,
    /// Optional. Message is a sticker, information about the sticker
    sticker: ?Sticker = null,
    /// Optional. Message is a forwarded story
    story: ?std.json.Value = null,
    /// Optional. Message is a video, information about the video
    video: ?Video = null,
    /// Optional. Message is a video note, information about the video message
    video_note: ?VideoNote = null,
    /// Optional. Message is a voice message, information about the file
    voice: ?Voice = null,
    /// Optional. Caption for the animation, audio, document, paid media, photo, video or voice
    caption: ?[]u8 = null,
    /// Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
    caption_entities: ?[]MessageEntity = null,
    /// Optional. True, if the caption must be shown above the message media
    show_caption_above_media: ?@TypeOf(true) = null,
    /// Optional. True, if the message media is covered by a spoiler animation
    has_media_spoiler: ?@TypeOf(true) = null,
    /// Optional. Message is a shared contact, information about the contact
    contact: ?Contact = null,
    /// Optional. Message is a dice with random value
    dice: ?Dice = null,
    /// Optional. Message is a game, information about the game. More about games »
    game: ?Game = null,
    /// Optional. Message is a native poll, information about the poll
    poll: ?Poll = null,
    /// Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set
    venue: ?Venue = null,
    /// Optional. Message is a shared location, information about the location
    location: ?Location = null,
    /// Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
    new_chat_members: ?[]User = null,
    /// Optional. A member was removed from the group, information about them (this member may be the bot itself)
    left_chat_member: ?User = null,
    /// Optional. A chat title was changed to this value
    new_chat_title: ?[]u8 = null,
    /// Optional. A chat photo was change to this value
    new_chat_photo: ?[]PhotoSize = null,
    /// Optional. Service message: the chat photo was deleted
    delete_chat_photo: ?@TypeOf(true) = null,
    /// Optional. Service message: the group has been created
    group_chat_created: ?@TypeOf(true) = null,
    /// Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.
    supergroup_chat_created: ?@TypeOf(true) = null,
    /// Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.
    channel_chat_created: ?@TypeOf(true) = null,
    /// Optional. Service message: auto-delete timer settings changed in the chat
    message_auto_delete_timer_changed: ?MessageAutoDeleteTimerChanged = null,
    /// Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    migrate_to_chat_id: ?i64 = null,
    /// Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    migrate_from_chat_id: ?i64 = null,
    /// Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
    pinned_message: ?MaybeInaccessibleMessage = null,
    /// Optional. Message is an invoice for a payment, information about the invoice. More about payments »
    invoice: ?Invoice = null,
    /// Optional. Message is a service message about a successful payment, information about the payment. More about payments »
    successful_payment: ?SuccessfulPayment = null,
    /// Optional. Message is a service message about a refunded payment, information about the payment. More about payments »
    refunded_payment: ?RefundedPayment = null,
    /// Optional. Service message: users were shared with the bot
    users_shared: ?UsersShared = null,
    /// Optional. Service message: a chat was shared with the bot
    chat_shared: ?ChatShared = null,
    /// Optional. The domain name of the website on which the user has logged in. More about Telegram Login »
    connected_website: ?[]u8 = null,
    /// Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess
    write_access_allowed: ?WriteAccessAllowed = null,
    /// Optional. Telegram Passport data
    passport_data: ?std.json.Value = null,
    /// Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.
    proximity_alert_triggered: ?ProximityAlertTriggered = null,
    /// Optional. Service message: user boosted the chat
    boost_added: ?ChatBoostAdded = null,
    /// Optional. Service message: chat background set
    chat_background_set: ?ChatBackground = null,
    /// Optional. Service message: forum topic created
    forum_topic_created: ?std.json.Value = null,
    /// Optional. Service message: forum topic edited
    forum_topic_edited: ?std.json.Value = null,
    /// Optional. Service message: forum topic closed
    forum_topic_closed: ?std.json.Value = null,
    /// Optional. Service message: forum topic reopened
    forum_topic_reopened: ?std.json.Value = null,
    /// Optional. Service message: the 'General' forum topic hidden
    general_forum_topic_hidden: ?std.json.Value = null,
    /// Optional. Service message: the 'General' forum topic unhidden
    general_forum_topic_unhidden: ?std.json.Value = null,
    /// Optional. Service message: a scheduled giveaway was created
    giveaway_created: ?GiveawayCreated = null,
    /// Optional. The message is a scheduled giveaway message
    giveaway: ?Giveaway = null,
    /// Optional. A giveaway with public winners was completed
    giveaway_winners: ?GiveawayWinners = null,
    /// Optional. Service message: a giveaway without public winners was completed
    giveaway_completed: ?GiveawayCompleted = null,
    /// Optional. Service message: video chat scheduled
    video_chat_scheduled: ?VideoChatScheduled = null,
    /// Optional. Service message: video chat started
    video_chat_started: ?VideoChatStarted = null,
    /// Optional. Service message: video chat ended
    video_chat_ended: ?VideoChatEnded = null,
    /// Optional. Service message: new participants invited to a video chat
    video_chat_participants_invited: ?VideoChatParticipantsInvited = null,
    /// Optional. Service message: data sent by a Web App
    web_app_data: ?WebAppData = null,
    /// Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.
    reply_markup: ?InlineKeyboardMarkup = null,
};

/// This object represents a unique message identifier.
pub const MessageId = struct {
    /// Unique message identifier. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent
    message_id: i64,
};

/// This object describes a message that was deleted or is otherwise inaccessible to the bot.
pub const InaccessibleMessage = struct {
    /// Chat the message belonged to
    chat: Chat,
    /// Unique message identifier inside the chat
    message_id: i64,
    /// Always 0. The field can be used to differentiate regular and inaccessible messages.
    date: i64,
};

/// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
pub const MessageEntity = struct {
    /// Type of the entity. Currently, can be “mention” (@username), “hashtag” (#hashtag or #hashtag@chatusername), “cashtag” ($USD or $USD@chatusername), “bot_command” (/start@jobs_bot), “url” (https://telegram.org), “email” (do-not-reply@telegram.org), “phone_number” (+1-212-555-0123), “bold” (bold text), “italic” (italic text), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “blockquote” (block quotation), “expandable_blockquote” (collapsed-by-default block quotation), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users without usernames), “custom_emoji” (for inline custom emoji stickers)
    type: []u8,
    /// Offset in UTF-16 code units to the start of the entity
    offset: i64,
    /// Length of the entity in UTF-16 code units
    length: i64,
    /// Optional. For “text_link” only, URL that will be opened after user taps on the text
    url: ?[]u8 = null,
    /// Optional. For “text_mention” only, the mentioned user
    user: ?User = null,
    /// Optional. For “pre” only, the programming language of the entity text
    language: ?[]u8 = null,
    /// Optional. For “custom_emoji” only, unique identifier of the custom emoji. Use getCustomEmojiStickers to get full information about the sticker
    custom_emoji_id: ?[]u8 = null,
};

/// This object contains information about the quoted part of a message that is replied to by the given message.
pub const TextQuote = struct {
    /// Text of the quoted part of a message that is replied to by the given message
    text: []u8,
    /// Optional. Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes.
    entities: ?[]MessageEntity = null,
    /// Approximate quote position in the original message in UTF-16 code units as specified by the sender
    position: i64,
    /// Optional. True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server.
    is_manual: ?@TypeOf(true) = null,
};

/// This object contains information about a message that is being replied to, which may come from another chat or forum topic.
pub const ExternalReplyInfo = struct {
    /// Origin of the message replied to by the given message
    origin: MessageOrigin,
    /// Optional. Chat the original message belongs to. Available only if the chat is a supergroup or a channel.
    chat: ?Chat = null,
    /// Optional. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel.
    message_id: ?i64 = null,
    /// Optional. Options used for link preview generation for the original message, if it is a text message
    link_preview_options: ?LinkPreviewOptions = null,
    /// Optional. Message is an animation, information about the animation
    animation: ?Animation = null,
    /// Optional. Message is an audio file, information about the file
    audio: ?Audio = null,
    /// Optional. Message is a general file, information about the file
    document: ?Document = null,
    /// Optional. Message contains paid media; information about the paid media
    paid_media: ?PaidMediaInfo = null,
    /// Optional. Message is a photo, available sizes of the photo
    photo: ?[]PhotoSize = null,
    /// Optional. Message is a sticker, information about the sticker
    sticker: ?Sticker = null,
    /// Optional. Message is a forwarded story
    story: ?std.json.Value = null,
    /// Optional. Message is a video, information about the video
    video: ?Video = null,
    /// Optional. Message is a video note, information about the video message
    video_note: ?VideoNote = null,
    /// Optional. Message is a voice message, information about the file
    voice: ?Voice = null,
    /// Optional. True, if the message media is covered by a spoiler animation
    has_media_spoiler: ?@TypeOf(true) = null,
    /// Optional. Message is a shared contact, information about the contact
    contact: ?Contact = null,
    /// Optional. Message is a dice with random value
    dice: ?Dice = null,
    /// Optional. Message is a game, information about the game. More about games »
    game: ?Game = null,
    /// Optional. Message is a scheduled giveaway, information about the giveaway
    giveaway: ?Giveaway = null,
    /// Optional. A giveaway with public winners was completed
    giveaway_winners: ?GiveawayWinners = null,
    /// Optional. Message is an invoice for a payment, information about the invoice. More about payments »
    invoice: ?Invoice = null,
    /// Optional. Message is a shared location, information about the location
    location: ?Location = null,
    /// Optional. Message is a native poll, information about the poll
    poll: ?Poll = null,
    /// Optional. Message is a venue, information about the venue
    venue: ?Venue = null,
};

/// Describes reply parameters for the message that is being sent.
pub const ReplyParameters = struct {
    /// Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified
    message_id: i64,
    /// Optional. If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername). Not supported for messages sent on behalf of a business account.
    chat_id: ?integer_or_string = null,
    /// Optional. Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account.
    allow_sending_without_reply: ?bool = null,
    /// Optional. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message.
    quote: ?[]u8 = null,
    /// Optional. Mode for parsing entities in the quote. See formatting options for more details.
    quote_parse_mode: ?[]u8 = null,
    /// Optional. A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode.
    quote_entities: ?[]MessageEntity = null,
    /// Optional. Position of the quote in the original message in UTF-16 code units
    quote_position: ?i64 = null,
};

/// The message was originally sent by a known user.
pub const MessageOriginUser = struct {
    /// Type of the message origin, always “user”
    type: []u8,
    /// Date the message was sent originally in Unix time
    date: i64,
    /// User that sent the message originally
    sender_user: User,
};

/// The message was originally sent by an unknown user.
pub const MessageOriginHiddenUser = struct {
    /// Type of the message origin, always “hidden_user”
    type: []u8,
    /// Date the message was sent originally in Unix time
    date: i64,
    /// Name of the user that sent the message originally
    sender_user_name: []u8,
};

/// The message was originally sent on behalf of a chat to a group chat.
pub const MessageOriginChat = struct {
    /// Type of the message origin, always “chat”
    type: []u8,
    /// Date the message was sent originally in Unix time
    date: i64,
    /// Chat that sent the message originally
    sender_chat: Chat,
    /// Optional. For messages originally sent by an anonymous chat administrator, original message author signature
    author_signature: ?[]u8 = null,
};

/// The message was originally sent to a channel chat.
pub const MessageOriginChannel = struct {
    /// Type of the message origin, always “channel”
    type: []u8,
    /// Date the message was sent originally in Unix time
    date: i64,
    /// Channel chat to which the message was originally sent
    chat: Chat,
    /// Unique message identifier inside the chat
    message_id: i64,
    /// Optional. Signature of the original post author
    author_signature: ?[]u8 = null,
};

/// This object represents one size of a photo or a file / sticker thumbnail.
pub const PhotoSize = struct {
    /// Identifier for this file, which can be used to download or reuse the file
    file_id: []u8,
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    file_unique_id: []u8,
    /// Photo width
    width: i64,
    /// Photo height
    height: i64,
    /// Optional. File size in bytes
    file_size: ?i64 = null,
};

/// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
pub const Animation = struct {
    /// Identifier for this file, which can be used to download or reuse the file
    file_id: []u8,
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    file_unique_id: []u8,
    /// Video width as defined by the sender
    width: i64,
    /// Video height as defined by the sender
    height: i64,
    /// Duration of the video in seconds as defined by the sender
    duration: i64,
    /// Optional. Animation thumbnail as defined by the sender
    thumbnail: ?PhotoSize = null,
    /// Optional. Original animation filename as defined by the sender
    file_name: ?[]u8 = null,
    /// Optional. MIME type of the file as defined by the sender
    mime_type: ?[]u8 = null,
    /// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
    file_size: ?i64 = null,
};

/// This object represents an audio file to be treated as music by the Telegram clients.
pub const Audio = struct {
    /// Identifier for this file, which can be used to download or reuse the file
    file_id: []u8,
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    file_unique_id: []u8,
    /// Duration of the audio in seconds as defined by the sender
    duration: i64,
    /// Optional. Performer of the audio as defined by the sender or by audio tags
    performer: ?[]u8 = null,
    /// Optional. Title of the audio as defined by the sender or by audio tags
    title: ?[]u8 = null,
    /// Optional. Original filename as defined by the sender
    file_name: ?[]u8 = null,
    /// Optional. MIME type of the file as defined by the sender
    mime_type: ?[]u8 = null,
    /// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
    file_size: ?i64 = null,
    /// Optional. Thumbnail of the album cover to which the music file belongs
    thumbnail: ?PhotoSize = null,
};

/// This object represents a general file (as opposed to photos, voice messages and audio files).
pub const Document = struct {
    /// Identifier for this file, which can be used to download or reuse the file
    file_id: []u8,
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    file_unique_id: []u8,
    /// Optional. Document thumbnail as defined by the sender
    thumbnail: ?PhotoSize = null,
    /// Optional. Original filename as defined by the sender
    file_name: ?[]u8 = null,
    /// Optional. MIME type of the file as defined by the sender
    mime_type: ?[]u8 = null,
    /// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
    file_size: ?i64 = null,
};

/// This object represents a story.
pub const Story = struct {
    /// Chat that posted the story
    chat: Chat,
    /// Unique identifier for the story in the chat
    id: i64,
};

/// This object represents a video file.
pub const Video = struct {
    /// Identifier for this file, which can be used to download or reuse the file
    file_id: []u8,
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    file_unique_id: []u8,
    /// Video width as defined by the sender
    width: i64,
    /// Video height as defined by the sender
    height: i64,
    /// Duration of the video in seconds as defined by the sender
    duration: i64,
    /// Optional. Video thumbnail
    thumbnail: ?PhotoSize = null,
    /// Optional. Available sizes of the cover of the video in the message
    cover: ?[]PhotoSize = null,
    /// Optional. Timestamp in seconds from which the video will play in the message
    start_timestamp: ?i64 = null,
    /// Optional. Original filename as defined by the sender
    file_name: ?[]u8 = null,
    /// Optional. MIME type of the file as defined by the sender
    mime_type: ?[]u8 = null,
    /// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
    file_size: ?i64 = null,
};

/// This object represents a video message (available in Telegram apps as of v.4.0).
pub const VideoNote = struct {
    /// Identifier for this file, which can be used to download or reuse the file
    file_id: []u8,
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    file_unique_id: []u8,
    /// Video width and height (diameter of the video message) as defined by the sender
    length: i64,
    /// Duration of the video in seconds as defined by the sender
    duration: i64,
    /// Optional. Video thumbnail
    thumbnail: ?PhotoSize = null,
    /// Optional. File size in bytes
    file_size: ?i64 = null,
};

/// This object represents a voice note.
pub const Voice = struct {
    /// Identifier for this file, which can be used to download or reuse the file
    file_id: []u8,
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    file_unique_id: []u8,
    /// Duration of the audio in seconds as defined by the sender
    duration: i64,
    /// Optional. MIME type of the file as defined by the sender
    mime_type: ?[]u8 = null,
    /// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
    file_size: ?i64 = null,
};

/// Describes the paid media added to a message.
pub const PaidMediaInfo = struct {
    /// The number of Telegram Stars that must be paid to buy access to the media
    star_count: i64,
    /// Information about the paid media
    paid_media: []PaidMedia,
};

/// The paid media isn't available before the payment.
pub const PaidMediaPreview = struct {
    /// Type of the paid media, always “preview”
    type: []u8,
    /// Optional. Media width as defined by the sender
    width: ?i64 = null,
    /// Optional. Media height as defined by the sender
    height: ?i64 = null,
    /// Optional. Duration of the media in seconds as defined by the sender
    duration: ?i64 = null,
};

/// The paid media is a photo.
pub const PaidMediaPhoto = struct {
    /// Type of the paid media, always “photo”
    type: []u8,
    /// The photo
    photo: []PhotoSize,
};

/// The paid media is a video.
pub const PaidMediaVideo = struct {
    /// Type of the paid media, always “video”
    type: []u8,
    /// The video
    video: Video,
};

/// This object represents a phone contact.
pub const Contact = struct {
    /// Contact's phone number
    phone_number: []u8,
    /// Contact's first name
    first_name: []u8,
    /// Optional. Contact's last name
    last_name: ?[]u8 = null,
    /// Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
    user_id: ?i64 = null,
    /// Optional. Additional data about the contact in the form of a vCard
    vcard: ?[]u8 = null,
};

/// This object represents an animated emoji that displays a random value.
pub const Dice = struct {
    /// Emoji on which the dice throw animation is based
    emoji: []u8,
    /// Value of the dice, 1-6 for “”, “” and “” base emoji, 1-5 for “” and “” base emoji, 1-64 for “” base emoji
    value: i64,
};

/// This object contains information about one answer option in a poll.
pub const PollOption = struct {
    /// Option text, 1-100 characters
    text: []u8,
    /// Optional. Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts
    text_entities: ?[]MessageEntity = null,
    /// Number of users that voted for this option
    voter_count: i64,
};

/// This object contains information about one answer option in a poll to be sent.
pub const InputPollOption = struct {
    /// Option text, 1-100 characters
    text: []u8,
    /// Optional. Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed
    text_parse_mode: ?[]u8 = null,
    /// Optional. A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode
    text_entities: ?[]MessageEntity = null,
};

/// This object represents an answer of a user in a non-anonymous poll.
pub const PollAnswer = struct {
    /// Unique poll identifier
    poll_id: []u8,
    /// Optional. The chat that changed the answer to the poll, if the voter is anonymous
    voter_chat: ?Chat = null,
    /// Optional. The user that changed the answer to the poll, if the voter isn't anonymous
    user: ?User = null,
    /// 0-based identifiers of chosen answer options. May be empty if the vote was retracted.
    option_ids: []i64,
};

/// This object contains information about a poll.
pub const Poll = struct {
    /// Unique poll identifier
    id: []u8,
    /// Poll question, 1-300 characters
    question: []u8,
    /// Optional. Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions
    question_entities: ?[]MessageEntity = null,
    /// List of poll options
    options: []PollOption,
    /// Total number of users that voted in the poll
    total_voter_count: i64,
    /// True, if the poll is closed
    is_closed: bool,
    /// True, if the poll is anonymous
    is_anonymous: bool,
    /// Poll type, currently can be “regular” or “quiz”
    type: []u8,
    /// True, if the poll allows multiple answers
    allows_multiple_answers: bool,
    /// Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
    correct_option_id: ?i64 = null,
    /// Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
    explanation: ?[]u8 = null,
    /// Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation
    explanation_entities: ?[]MessageEntity = null,
    /// Optional. Amount of time in seconds the poll will be active after creation
    open_period: ?i64 = null,
    /// Optional. Point in time (Unix timestamp) when the poll will be automatically closed
    close_date: ?i64 = null,
};

/// This object represents a point on the map.
pub const Location = struct {
    /// Latitude as defined by the sender
    latitude: f64,
    /// Longitude as defined by the sender
    longitude: f64,
    /// Optional. The radius of uncertainty for the location, measured in meters; 0-1500
    horizontal_accuracy: ?f64 = null,
    /// Optional. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only.
    live_period: ?i64 = null,
    /// Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
    heading: ?i64 = null,
    /// Optional. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
    proximity_alert_radius: ?i64 = null,
};

/// This object represents a venue.
pub const Venue = struct {
    /// Venue location. Can't be a live location
    location: Location,
    /// Name of the venue
    title: []u8,
    /// Address of the venue
    address: []u8,
    /// Optional. Foursquare identifier of the venue
    foursquare_id: ?[]u8 = null,
    /// Optional. Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)
    foursquare_type: ?[]u8 = null,
    /// Optional. Google Places identifier of the venue
    google_place_id: ?[]u8 = null,
    /// Optional. Google Places type of the venue. (See supported types.)
    google_place_type: ?[]u8 = null,
};

/// Describes data sent from a Web App to the bot.
pub const WebAppData = struct {
    /// The data. Be aware that a bad client can send arbitrary data in this field.
    data: []u8,
    /// Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field.
    button_text: []u8,
};

/// This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
pub const ProximityAlertTriggered = struct {
    /// User that triggered the alert
    traveler: User,
    /// User that set the alert
    watcher: User,
    /// The distance between the users
    distance: i64,
};

/// This object represents a service message about a change in auto-delete timer settings.
pub const MessageAutoDeleteTimerChanged = struct {
    /// New auto-delete time for messages in the chat; in seconds
    message_auto_delete_time: i64,
};

/// This object represents a service message about a user boosting a chat.
pub const ChatBoostAdded = struct {
    /// Number of boosts added by the user
    boost_count: i64,
};

/// The background is filled using the selected color.
pub const BackgroundFillSolid = struct {
    /// Type of the background fill, always “solid”
    type: []u8,
    /// The color of the background fill in the RGB24 format
    color: i64,
};

/// The background is a gradient fill.
pub const BackgroundFillGradient = struct {
    /// Type of the background fill, always “gradient”
    type: []u8,
    /// Top color of the gradient in the RGB24 format
    top_color: i64,
    /// Bottom color of the gradient in the RGB24 format
    bottom_color: i64,
    /// Clockwise rotation angle of the background fill in degrees; 0-359
    rotation_angle: i64,
};

/// The background is a freeform gradient that rotates after every message in the chat.
pub const BackgroundFillFreeformGradient = struct {
    /// Type of the background fill, always “freeform_gradient”
    type: []u8,
    /// A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format
    colors: []i64,
};

/// The background is automatically filled based on the selected colors.
pub const BackgroundTypeFill = struct {
    /// Type of the background, always “fill”
    type: []u8,
    /// The background fill
    fill: BackgroundFill,
    /// Dimming of the background in dark themes, as a percentage; 0-100
    dark_theme_dimming: i64,
};

/// The background is a wallpaper in the JPEG format.
pub const BackgroundTypeWallpaper = struct {
    /// Type of the background, always “wallpaper”
    type: []u8,
    /// Document with the wallpaper
    document: Document,
    /// Dimming of the background in dark themes, as a percentage; 0-100
    dark_theme_dimming: i64,
    /// Optional. True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12
    is_blurred: ?@TypeOf(true) = null,
    /// Optional. True, if the background moves slightly when the device is tilted
    is_moving: ?@TypeOf(true) = null,
};

/// The background is a .PNG or .TGV (gzipped subset of SVG with MIME type “application/x-tgwallpattern”) pattern to be combined with the background fill chosen by the user.
pub const BackgroundTypePattern = struct {
    /// Type of the background, always “pattern”
    type: []u8,
    /// Document with the pattern
    document: Document,
    /// The background fill that is combined with the pattern
    fill: BackgroundFill,
    /// Intensity of the pattern when it is shown above the filled background; 0-100
    intensity: i64,
    /// Optional. True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only
    is_inverted: ?@TypeOf(true) = null,
    /// Optional. True, if the background moves slightly when the device is tilted
    is_moving: ?@TypeOf(true) = null,
};

/// The background is taken directly from a built-in chat theme.
pub const BackgroundTypeChatTheme = struct {
    /// Type of the background, always “chat_theme”
    type: []u8,
    /// Name of the chat theme, which is usually an emoji
    theme_name: []u8,
};

/// This object represents a chat background.
pub const ChatBackground = struct {
    /// Type of the background
    type: BackgroundType,
};

/// This object represents a service message about a new forum topic created in the chat.
pub const ForumTopicCreated = struct {
    /// Name of the topic
    name: []u8,
    /// Color of the topic icon in RGB format
    icon_color: i64,
    /// Optional. Unique identifier of the custom emoji shown as the topic icon
    icon_custom_emoji_id: ?[]u8 = null,
};

/// This object represents a service message about an edited forum topic.
pub const ForumTopicEdited = struct {
    /// Optional. New name of the topic, if it was edited
    name: ?[]u8 = null,
    /// Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed
    icon_custom_emoji_id: ?[]u8 = null,
};

/// This object contains information about a user that was shared with the bot using a KeyboardButtonRequestUsers button.
pub const SharedUser = struct {
    /// Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so 64-bit integers or double-precision float types are safe for storing these identifiers. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means.
    user_id: i64,
    /// Optional. First name of the user, if the name was requested by the bot
    first_name: ?[]u8 = null,
    /// Optional. Last name of the user, if the name was requested by the bot
    last_name: ?[]u8 = null,
    /// Optional. Username of the user, if the username was requested by the bot
    username: ?[]u8 = null,
    /// Optional. Available sizes of the chat photo, if the photo was requested by the bot
    photo: ?[]PhotoSize = null,
};

/// This object contains information about the users whose identifiers were shared with the bot using a KeyboardButtonRequestUsers button.
pub const UsersShared = struct {
    /// Identifier of the request
    request_id: i64,
    /// Information about users shared with the bot.
    users: []SharedUser,
};

/// This object contains information about a chat that was shared with the bot using a KeyboardButtonRequestChat button.
pub const ChatShared = struct {
    /// Identifier of the request
    request_id: i64,
    /// Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means.
    chat_id: i64,
    /// Optional. Title of the chat, if the title was requested by the bot.
    title: ?[]u8 = null,
    /// Optional. Username of the chat, if the username was requested by the bot and available.
    username: ?[]u8 = null,
    /// Optional. Available sizes of the chat photo, if the photo was requested by the bot
    photo: ?[]PhotoSize = null,
};

/// This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.
pub const WriteAccessAllowed = struct {
    /// Optional. True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess
    from_request: ?bool = null,
    /// Optional. Name of the Web App, if the access was granted when the Web App was launched from a link
    web_app_name: ?[]u8 = null,
    /// Optional. True, if the access was granted when the bot was added to the attachment or side menu
    from_attachment_menu: ?bool = null,
};

/// This object represents a service message about a video chat scheduled in the chat.
pub const VideoChatScheduled = struct {
    /// Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator
    start_date: i64,
};

/// This object represents a service message about a video chat ended in the chat.
pub const VideoChatEnded = struct {
    /// Video chat duration in seconds
    duration: i64,
};

/// This object represents a service message about new members invited to a video chat.
pub const VideoChatParticipantsInvited = struct {
    /// New members that were invited to the video chat
    users: []User,
};

/// This object represents a service message about the creation of a scheduled giveaway.
pub const GiveawayCreated = struct {
    /// Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
    prize_star_count: ?i64 = null,
};

/// This object represents a message about a scheduled giveaway.
pub const Giveaway = struct {
    /// The list of chats which the user must join to participate in the giveaway
    chats: []Chat,
    /// Point in time (Unix timestamp) when winners of the giveaway will be selected
    winners_selection_date: i64,
    /// The number of users which are supposed to be selected as winners of the giveaway
    winner_count: i64,
    /// Optional. True, if only users who join the chats after the giveaway started should be eligible to win
    only_new_members: ?@TypeOf(true) = null,
    /// Optional. True, if the list of giveaway winners will be visible to everyone
    has_public_winners: ?@TypeOf(true) = null,
    /// Optional. Description of additional giveaway prize
    prize_description: ?[]u8 = null,
    /// Optional. A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways.
    country_codes: ?[][]u8 = null,
    /// Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
    prize_star_count: ?i64 = null,
    /// Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only
    premium_subscription_month_count: ?i64 = null,
};

/// This object represents a message about the completion of a giveaway with public winners.
pub const GiveawayWinners = struct {
    /// The chat that created the giveaway
    chat: Chat,
    /// Identifier of the message with the giveaway in the chat
    giveaway_message_id: i64,
    /// Point in time (Unix timestamp) when winners of the giveaway were selected
    winners_selection_date: i64,
    /// Total number of winners in the giveaway
    winner_count: i64,
    /// List of up to 100 winners of the giveaway
    winners: []User,
    /// Optional. The number of other chats the user had to join in order to be eligible for the giveaway
    additional_chat_count: ?i64 = null,
    /// Optional. The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only
    prize_star_count: ?i64 = null,
    /// Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only
    premium_subscription_month_count: ?i64 = null,
    /// Optional. Number of undistributed prizes
    unclaimed_prize_count: ?i64 = null,
    /// Optional. True, if only users who had joined the chats after the giveaway started were eligible to win
    only_new_members: ?@TypeOf(true) = null,
    /// Optional. True, if the giveaway was canceled because the payment for it was refunded
    was_refunded: ?@TypeOf(true) = null,
    /// Optional. Description of additional giveaway prize
    prize_description: ?[]u8 = null,
};

/// This object represents a service message about the completion of a giveaway without public winners.
pub const GiveawayCompleted = struct {
    /// Number of winners in the giveaway
    winner_count: i64,
    /// Optional. Number of undistributed prizes
    unclaimed_prize_count: ?i64 = null,
    /// Optional. Message with the giveaway that was completed, if it wasn't deleted
    giveaway_message: ?*Message = null,
    /// Optional. True, if the giveaway is a Telegram Star giveaway. Otherwise, currently, the giveaway is a Telegram Premium giveaway.
    is_star_giveaway: ?@TypeOf(true) = null,
};

/// Describes the options used for link preview generation.
pub const LinkPreviewOptions = struct {
    /// Optional. True, if the link preview is disabled
    is_disabled: ?bool = null,
    /// Optional. URL to use for the link preview. If empty, then the first URL found in the message text will be used
    url: ?[]u8 = null,
    /// Optional. True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview
    prefer_small_media: ?bool = null,
    /// Optional. True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview
    prefer_large_media: ?bool = null,
    /// Optional. True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text
    show_above_text: ?bool = null,
};

/// This object represent a user's profile pictures.
pub const UserProfilePhotos = struct {
    /// Total number of profile pictures the target user has
    total_count: i64,
    /// Requested profile pictures (in up to 4 sizes each)
    photos: [][]PhotoSize,
};

/// This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
pub const File = struct {
    /// Identifier for this file, which can be used to download or reuse the file
    file_id: []u8,
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    file_unique_id: []u8,
    /// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
    file_size: ?i64 = null,
    /// Optional. File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.
    file_path: ?[]u8 = null,
};

/// Describes a Web App.
pub const WebAppInfo = struct {
    /// An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps
    url: []u8,
};

/// This object represents a custom keyboard with reply options (see Introduction to bots for details and examples). Not supported in channels and for messages sent on behalf of a Telegram Business account.
pub const ReplyKeyboardMarkup = struct {
    /// Array of button rows, each represented by an Array of KeyboardButton objects
    keyboard: [][]KeyboardButton,
    /// Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon.
    is_persistent: ?bool = null,
    /// Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.
    resize_keyboard: ?bool = null,
    /// Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false.
    one_time_keyboard: ?bool = null,
    /// Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters
    input_field_placeholder: ?[]u8 = null,
    /// Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
    selective: ?bool = null,
};

/// This object represents one button of the reply keyboard. At most one of the optional fields must be used to specify type of the button. For simple text buttons, String can be used instead of this object to specify the button text.Note: request_users and request_chat options will only work in Telegram versions released after 3 February, 2023. Older clients will display unsupported message.
pub const KeyboardButton = struct {
    /// Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
    text: []u8,
    /// Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a “users_shared” service message. Available in private chats only.
    request_users: ?KeyboardButtonRequestUsers = null,
    /// Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a “chat_shared” service message. Available in private chats only.
    request_chat: ?KeyboardButtonRequestChat = null,
    /// Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only.
    request_contact: ?bool = null,
    /// Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only.
    request_location: ?bool = null,
    /// Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only.
    request_poll: ?KeyboardButtonPollType = null,
    /// Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a “web_app_data” service message. Available in private chats only.
    web_app: ?WebAppInfo = null,
};

/// This object defines the criteria used to request suitable users. Information about the selected users will be shared with the bot when the corresponding button is pressed. More about requesting users »
pub const KeyboardButtonRequestUsers = struct {
    /// Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message
    request_id: i64,
    /// Optional. Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied.
    user_is_bot: ?bool = null,
    /// Optional. Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied.
    user_is_premium: ?bool = null,
    /// Optional. The maximum number of users to be selected; 1-10. Defaults to 1.
    max_quantity: ?i64 = null,
    /// Optional. Pass True to request the users' first and last names
    request_name: ?bool = null,
    /// Optional. Pass True to request the users' usernames
    request_username: ?bool = null,
    /// Optional. Pass True to request the users' photos
    request_photo: ?bool = null,
};

/// This object defines the criteria used to request a suitable chat. Information about the selected chat will be shared with the bot when the corresponding button is pressed. The bot will be granted requested rights in the chat if appropriate. More about requesting chats ».
pub const KeyboardButtonRequestChat = struct {
    /// Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message
    request_id: i64,
    /// Pass True to request a channel chat, pass False to request a group or a supergroup chat.
    chat_is_channel: bool,
    /// Optional. Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied.
    chat_is_forum: ?bool = null,
    /// Optional. Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied.
    chat_has_username: ?bool = null,
    /// Optional. Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied.
    chat_is_created: ?bool = null,
    /// Optional. A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of bot_administrator_rights. If not specified, no additional restrictions are applied.
    user_administrator_rights: ?std.json.Value = null,
    /// Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of user_administrator_rights. If not specified, no additional restrictions are applied.
    bot_administrator_rights: ?std.json.Value = null,
    /// Optional. Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied.
    bot_is_member: ?bool = null,
    /// Optional. Pass True to request the chat's title
    request_title: ?bool = null,
    /// Optional. Pass True to request the chat's username
    request_username: ?bool = null,
    /// Optional. Pass True to request the chat's photo
    request_photo: ?bool = null,
};

/// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
pub const KeyboardButtonPollType = struct {
    /// Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
    type: ?[]u8 = null,
};

/// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup). Not supported in channels and for messages sent on behalf of a Telegram Business account.
pub const ReplyKeyboardRemove = struct {
    /// Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)
    remove_keyboard: @TypeOf(true),
    /// Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
    selective: ?bool = null,
};

/// This object represents an inline keyboard that appears right next to the message it belongs to.
pub const InlineKeyboardMarkup = struct {
    /// Array of button rows, each represented by an Array of InlineKeyboardButton objects
    inline_keyboard: [][]InlineKeyboardButton,
};

/// This object represents one button of an inline keyboard. Exactly one of the optional fields must be used to specify type of the button.
pub const InlineKeyboardButton = struct {
    /// Label text on the button
    text: []u8,
    /// Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings.
    url: ?[]u8 = null,
    /// Optional. Data to be sent in a callback query to the bot when the button is pressed, 1-64 bytes
    callback_data: ?[]u8 = null,
    /// Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.
    web_app: ?WebAppInfo = null,
    /// Optional. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.
    login_url: ?LoginUrl = null,
    /// Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account.
    switch_inline_query: ?[]u8 = null,
    /// Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account.
    switch_inline_query_current_chat: ?[]u8 = null,
    /// Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account.
    switch_inline_query_chosen_chat: ?SwitchInlineQueryChosenChat = null,
    /// Optional. Description of the button that copies the specified text to the clipboard.
    copy_text: ?CopyTextButton = null,
    /// Optional. Description of the game that will be launched when the user presses the button.NOTE: This type of button must always be the first button in the first row.
    callback_game: ?CallbackGame = null,
    /// Optional. Specify True, to send a Pay button. Substrings “” and “XTR” in the buttons's text will be replaced with a Telegram Star icon.NOTE: This type of button must always be the first button in the first row and can only be used in invoice messages.
    pay: ?bool = null,
};

/// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:Telegram apps support these buttons as of version 5.7.
pub const LoginUrl = struct {
    /// An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.
    url: []u8,
    /// Optional. New text of the button in forwarded messages.
    forward_text: ?[]u8 = null,
    /// Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.
    bot_username: ?[]u8 = null,
    /// Optional. Pass True to request the permission for your bot to send messages to the user.
    request_write_access: ?bool = null,
};

/// This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.
pub const SwitchInlineQueryChosenChat = struct {
    /// Optional. The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted
    query: ?[]u8 = null,
    /// Optional. True, if private chats with users can be chosen
    allow_user_chats: ?bool = null,
    /// Optional. True, if private chats with bots can be chosen
    allow_bot_chats: ?bool = null,
    /// Optional. True, if group and supergroup chats can be chosen
    allow_group_chats: ?bool = null,
    /// Optional. True, if channel chats can be chosen
    allow_channel_chats: ?bool = null,
};

/// This object represents an inline keyboard button that copies specified text to the clipboard.
pub const CopyTextButton = struct {
    /// The text to be copied to the clipboard; 1-256 characters
    text: []u8,
};

/// This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.
pub const CallbackQuery = struct {
    /// Unique identifier for this query
    id: []u8,
    /// Sender
    from: User,
    /// Optional. Message sent by the bot with the callback button that originated the query
    message: ?MaybeInaccessibleMessage = null,
    /// Optional. Identifier of the message sent via the bot in inline mode, that originated the query.
    inline_message_id: ?[]u8 = null,
    /// Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.
    chat_instance: []u8,
    /// Optional. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data.
    data: ?[]u8 = null,
    /// Optional. Short name of a Game to be returned, serves as the unique identifier for the game
    game_short_name: ?[]u8 = null,
};

/// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode. Not supported in channels and for messages sent on behalf of a Telegram Business account.
pub const ForceReply = struct {
    /// Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
    force_reply: @TypeOf(true),
    /// Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters
    input_field_placeholder: ?[]u8 = null,
    /// Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.
    selective: ?bool = null,
};

/// This object represents a chat photo.
pub const ChatPhoto = struct {
    /// File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
    small_file_id: []u8,
    /// Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    small_file_unique_id: []u8,
    /// File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
    big_file_id: []u8,
    /// Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    big_file_unique_id: []u8,
};

/// Represents an invite link for a chat.
pub const ChatInviteLink = struct {
    /// The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with “…”.
    invite_link: []u8,
    /// Creator of the link
    creator: User,
    /// True, if users joining the chat via the link need to be approved by chat administrators
    creates_join_request: bool,
    /// True, if the link is primary
    is_primary: bool,
    /// True, if the link is revoked
    is_revoked: bool,
    /// Optional. Invite link name
    name: ?[]u8 = null,
    /// Optional. Point in time (Unix timestamp) when the link will expire or has been expired
    expire_date: ?i64 = null,
    /// Optional. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
    member_limit: ?i64 = null,
    /// Optional. Number of pending join requests created using this link
    pending_join_request_count: ?i64 = null,
    /// Optional. The number of seconds the subscription will be active for before the next payment
    subscription_period: ?i64 = null,
    /// Optional. The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link
    subscription_price: ?i64 = null,
};

/// Represents the rights of an administrator in a chat.
pub const ChatAdministratorRights = struct {
    /// True, if the user's presence in the chat is hidden
    is_anonymous: bool,
    /// True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
    can_manage_chat: bool,
    /// True, if the administrator can delete messages of other users
    can_delete_messages: bool,
    /// True, if the administrator can manage video chats
    can_manage_video_chats: bool,
    /// True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics
    can_restrict_members: bool,
    /// True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)
    can_promote_members: bool,
    /// True, if the user is allowed to change the chat title, photo and other settings
    can_change_info: bool,
    /// True, if the user is allowed to invite new users to the chat
    can_invite_users: bool,
    /// True, if the administrator can post stories to the chat
    can_post_stories: bool,
    /// True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive
    can_edit_stories: bool,
    /// True, if the administrator can delete stories posted by other users
    can_delete_stories: bool,
    /// Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only
    can_post_messages: ?bool = null,
    /// Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only
    can_edit_messages: ?bool = null,
    /// Optional. True, if the user is allowed to pin messages; for groups and supergroups only
    can_pin_messages: ?bool = null,
    /// Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
    can_manage_topics: ?bool = null,
};

/// This object represents changes in the status of a chat member.
pub const ChatMemberUpdated = struct {
    /// Chat the user belongs to
    chat: Chat,
    /// Performer of the action, which resulted in the change
    from: User,
    /// Date the change was done in Unix time
    date: i64,
    /// Previous information about the chat member
    old_chat_member: ChatMember,
    /// New information about the chat member
    new_chat_member: ChatMember,
    /// Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events only.
    invite_link: ?ChatInviteLink = null,
    /// Optional. True, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator
    via_join_request: ?bool = null,
    /// Optional. True, if the user joined the chat via a chat folder invite link
    via_chat_folder_invite_link: ?bool = null,
};

/// Represents a chat member that owns the chat and has all administrator privileges.
pub const ChatMemberOwner = struct {
    /// The member's status in the chat, always “creator”
    status: []u8,
    /// Information about the user
    user: User,
    /// True, if the user's presence in the chat is hidden
    is_anonymous: bool,
    /// Optional. Custom title for this user
    custom_title: ?[]u8 = null,
};

/// Represents a chat member that has some additional privileges.
pub const ChatMemberAdministrator = struct {
    /// The member's status in the chat, always “administrator”
    status: []u8,
    /// Information about the user
    user: User,
    /// True, if the bot is allowed to edit administrator privileges of that user
    can_be_edited: bool,
    /// True, if the user's presence in the chat is hidden
    is_anonymous: bool,
    /// True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
    can_manage_chat: bool,
    /// True, if the administrator can delete messages of other users
    can_delete_messages: bool,
    /// True, if the administrator can manage video chats
    can_manage_video_chats: bool,
    /// True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics
    can_restrict_members: bool,
    /// True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)
    can_promote_members: bool,
    /// True, if the user is allowed to change the chat title, photo and other settings
    can_change_info: bool,
    /// True, if the user is allowed to invite new users to the chat
    can_invite_users: bool,
    /// True, if the administrator can post stories to the chat
    can_post_stories: bool,
    /// True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive
    can_edit_stories: bool,
    /// True, if the administrator can delete stories posted by other users
    can_delete_stories: bool,
    /// Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only
    can_post_messages: ?bool = null,
    /// Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only
    can_edit_messages: ?bool = null,
    /// Optional. True, if the user is allowed to pin messages; for groups and supergroups only
    can_pin_messages: ?bool = null,
    /// Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
    can_manage_topics: ?bool = null,
    /// Optional. Custom title for this user
    custom_title: ?[]u8 = null,
};

/// Represents a chat member that has no additional privileges or restrictions.
pub const ChatMemberMember = struct {
    /// The member's status in the chat, always “member”
    status: []u8,
    /// Information about the user
    user: User,
    /// Optional. Date when the user's subscription will expire; Unix time
    until_date: ?i64 = null,
};

/// Represents a chat member that is under certain restrictions in the chat. Supergroups only.
pub const ChatMemberRestricted = struct {
    /// The member's status in the chat, always “restricted”
    status: []u8,
    /// Information about the user
    user: User,
    /// True, if the user is a member of the chat at the moment of the request
    is_member: bool,
    /// True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues
    can_send_messages: bool,
    /// True, if the user is allowed to send audios
    can_send_audios: bool,
    /// True, if the user is allowed to send documents
    can_send_documents: bool,
    /// True, if the user is allowed to send photos
    can_send_photos: bool,
    /// True, if the user is allowed to send videos
    can_send_videos: bool,
    /// True, if the user is allowed to send video notes
    can_send_video_notes: bool,
    /// True, if the user is allowed to send voice notes
    can_send_voice_notes: bool,
    /// True, if the user is allowed to send polls
    can_send_polls: bool,
    /// True, if the user is allowed to send animations, games, stickers and use inline bots
    can_send_other_messages: bool,
    /// True, if the user is allowed to add web page previews to their messages
    can_add_web_page_previews: bool,
    /// True, if the user is allowed to change the chat title, photo and other settings
    can_change_info: bool,
    /// True, if the user is allowed to invite new users to the chat
    can_invite_users: bool,
    /// True, if the user is allowed to pin messages
    can_pin_messages: bool,
    /// True, if the user is allowed to create forum topics
    can_manage_topics: bool,
    /// Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever
    until_date: i64,
};

/// Represents a chat member that isn't currently a member of the chat, but may join it themselves.
pub const ChatMemberLeft = struct {
    /// The member's status in the chat, always “left”
    status: []u8,
    /// Information about the user
    user: User,
};

/// Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.
pub const ChatMemberBanned = struct {
    /// The member's status in the chat, always “kicked”
    status: []u8,
    /// Information about the user
    user: User,
    /// Date when restrictions will be lifted for this user; Unix time. If 0, then the user is banned forever
    until_date: i64,
};

/// Represents a join request sent to a chat.
pub const ChatJoinRequest = struct {
    /// Chat to which the request was sent
    chat: Chat,
    /// User that sent the join request
    from: User,
    /// Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user.
    user_chat_id: i64,
    /// Date the request was sent in Unix time
    date: i64,
    /// Optional. Bio of the user.
    bio: ?[]u8 = null,
    /// Optional. Chat invite link that was used by the user to send the join request
    invite_link: ?ChatInviteLink = null,
};

/// Describes actions that a non-administrator user is allowed to take in a chat.
pub const ChatPermissions = struct {
    /// Optional. True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues
    can_send_messages: ?bool = null,
    /// Optional. True, if the user is allowed to send audios
    can_send_audios: ?bool = null,
    /// Optional. True, if the user is allowed to send documents
    can_send_documents: ?bool = null,
    /// Optional. True, if the user is allowed to send photos
    can_send_photos: ?bool = null,
    /// Optional. True, if the user is allowed to send videos
    can_send_videos: ?bool = null,
    /// Optional. True, if the user is allowed to send video notes
    can_send_video_notes: ?bool = null,
    /// Optional. True, if the user is allowed to send voice notes
    can_send_voice_notes: ?bool = null,
    /// Optional. True, if the user is allowed to send polls
    can_send_polls: ?bool = null,
    /// Optional. True, if the user is allowed to send animations, games, stickers and use inline bots
    can_send_other_messages: ?bool = null,
    /// Optional. True, if the user is allowed to add web page previews to their messages
    can_add_web_page_previews: ?bool = null,
    /// Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
    can_change_info: ?bool = null,
    /// Optional. True, if the user is allowed to invite new users to the chat
    can_invite_users: ?bool = null,
    /// Optional. True, if the user is allowed to pin messages. Ignored in public supergroups
    can_pin_messages: ?bool = null,
    /// Optional. True, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages
    can_manage_topics: ?bool = null,
};

/// Describes the birthdate of a user.
pub const Birthdate = struct {
    /// Day of the user's birth; 1-31
    day: i64,
    /// Month of the user's birth; 1-12
    month: i64,
    /// Optional. Year of the user's birth
    year: ?i64 = null,
};

/// Contains information about the start page settings of a Telegram Business account.
pub const BusinessIntro = struct {
    /// Optional. Title text of the business intro
    title: ?[]u8 = null,
    /// Optional. Message text of the business intro
    message: ?[]u8 = null,
    /// Optional. Sticker of the business intro
    sticker: ?Sticker = null,
};

/// Contains information about the location of a Telegram Business account.
pub const BusinessLocation = struct {
    /// Address of the business
    address: []u8,
    /// Optional. Location of the business
    location: ?Location = null,
};

/// Describes an interval of time during which a business is open.
pub const BusinessOpeningHoursInterval = struct {
    /// The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60
    opening_minute: i64,
    /// The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60
    closing_minute: i64,
};

/// Describes the opening hours of a business.
pub const BusinessOpeningHours = struct {
    /// Unique name of the time zone for which the opening hours are defined
    time_zone_name: []u8,
    /// List of time intervals describing business opening hours
    opening_hours: []BusinessOpeningHoursInterval,
};

/// Represents a location to which a chat is connected.
pub const ChatLocation = struct {
    /// The location to which the supergroup is connected. Can't be a live location.
    location: Location,
    /// Location address; 1-64 characters, as defined by the chat owner
    address: []u8,
};

/// The reaction is based on an emoji.
pub const ReactionTypeEmoji = struct {
    /// Type of the reaction, always “emoji”
    type: []u8,
    /// Reaction emoji. Currently, it can be one of "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
    emoji: []u8,
};

/// The reaction is based on a custom emoji.
pub const ReactionTypeCustomEmoji = struct {
    /// Type of the reaction, always “custom_emoji”
    type: []u8,
    /// Custom emoji identifier
    custom_emoji_id: []u8,
};

/// The reaction is paid.
pub const ReactionTypePaid = struct {
    /// Type of the reaction, always “paid”
    type: []u8,
};

/// Represents a reaction added to a message along with the number of times it was added.
pub const ReactionCount = struct {
    /// Type of the reaction
    type: ReactionType,
    /// Number of times the reaction was added
    total_count: i64,
};

/// This object represents a change of a reaction on a message performed by a user.
pub const MessageReactionUpdated = struct {
    /// The chat containing the message the user reacted to
    chat: Chat,
    /// Unique identifier of the message inside the chat
    message_id: i64,
    /// Optional. The user that changed the reaction, if the user isn't anonymous
    user: ?User = null,
    /// Optional. The chat on behalf of which the reaction was changed, if the user is anonymous
    actor_chat: ?Chat = null,
    /// Date of the change in Unix time
    date: i64,
    /// Previous list of reaction types that were set by the user
    old_reaction: []ReactionType,
    /// New list of reaction types that have been set by the user
    new_reaction: []ReactionType,
};

/// This object represents reaction changes on a message with anonymous reactions.
pub const MessageReactionCountUpdated = struct {
    /// The chat containing the message
    chat: Chat,
    /// Unique message identifier inside the chat
    message_id: i64,
    /// Date of the change in Unix time
    date: i64,
    /// List of reactions that are present on the message
    reactions: []ReactionCount,
};

/// This object represents a forum topic.
pub const ForumTopic = struct {
    /// Unique identifier of the forum topic
    message_thread_id: i64,
    /// Name of the topic
    name: []u8,
    /// Color of the topic icon in RGB format
    icon_color: i64,
    /// Optional. Unique identifier of the custom emoji shown as the topic icon
    icon_custom_emoji_id: ?[]u8 = null,
};

/// This object represents a bot command.
pub const BotCommand = struct {
    /// Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores.
    command: []u8,
    /// Description of the command; 1-256 characters.
    description: []u8,
};

/// Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user.
pub const BotCommandScopeDefault = struct {
    /// Scope type, must be default
    type: []u8,
};

/// Represents the scope of bot commands, covering all private chats.
pub const BotCommandScopeAllPrivateChats = struct {
    /// Scope type, must be all_private_chats
    type: []u8,
};

/// Represents the scope of bot commands, covering all group and supergroup chats.
pub const BotCommandScopeAllGroupChats = struct {
    /// Scope type, must be all_group_chats
    type: []u8,
};

/// Represents the scope of bot commands, covering all group and supergroup chat administrators.
pub const BotCommandScopeAllChatAdministrators = struct {
    /// Scope type, must be all_chat_administrators
    type: []u8,
};

/// Represents the scope of bot commands, covering a specific chat.
pub const BotCommandScopeChat = struct {
    /// Scope type, must be chat
    type: []u8,
    /// Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    chat_id: integer_or_string,
};

/// Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.
pub const BotCommandScopeChatAdministrators = struct {
    /// Scope type, must be chat_administrators
    type: []u8,
    /// Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    chat_id: integer_or_string,
};

/// Represents the scope of bot commands, covering a specific member of a group or supergroup chat.
pub const BotCommandScopeChatMember = struct {
    /// Scope type, must be chat_member
    type: []u8,
    /// Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    chat_id: integer_or_string,
    /// Unique identifier of the target user
    user_id: i64,
};

/// This object represents the bot's name.
pub const BotName = struct {
    /// The bot's name
    name: []u8,
};

/// This object represents the bot's description.
pub const BotDescription = struct {
    /// The bot's description
    description: []u8,
};

/// This object represents the bot's short description.
pub const BotShortDescription = struct {
    /// The bot's short description
    short_description: []u8,
};

/// Represents a menu button, which opens the bot's list of commands.
pub const MenuButtonCommands = struct {
    /// Type of the button, must be commands
    type: []u8,
};

/// Represents a menu button, which launches a Web App.
pub const MenuButtonWebApp = struct {
    /// Type of the button, must be web_app
    type: []u8,
    /// Text on the button
    text: []u8,
    /// Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Alternatively, a t.me link to a Web App of the bot can be specified in the object instead of the Web App's URL, in which case the Web App will be opened as if the user pressed the link.
    web_app: WebAppInfo,
};

/// Describes that no specific value for the menu button was set.
pub const MenuButtonDefault = struct {
    /// Type of the button, must be default
    type: []u8,
};

/// The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.
pub const ChatBoostSourcePremium = struct {
    /// Source of the boost, always “premium”
    source: []u8,
    /// User that boosted the chat
    user: User,
};

/// The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.
pub const ChatBoostSourceGiftCode = struct {
    /// Source of the boost, always “gift_code”
    source: []u8,
    /// User for which the gift code was created
    user: User,
};

/// The boost was obtained by the creation of a Telegram Premium or a Telegram Star giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription for Telegram Premium giveaways and prize_star_count / 500 times for one year for Telegram Star giveaways.
pub const ChatBoostSourceGiveaway = struct {
    /// Source of the boost, always “giveaway”
    source: []u8,
    /// Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet.
    giveaway_message_id: i64,
    /// Optional. User that won the prize in the giveaway if any; for Telegram Premium giveaways only
    user: ?User = null,
    /// Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
    prize_star_count: ?i64 = null,
    /// Optional. True, if the giveaway was completed, but there was no user to win the prize
    is_unclaimed: ?@TypeOf(true) = null,
};

/// This object contains information about a chat boost.
pub const ChatBoost = struct {
    /// Unique identifier of the boost
    boost_id: []u8,
    /// Point in time (Unix timestamp) when the chat was boosted
    add_date: i64,
    /// Point in time (Unix timestamp) when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged
    expiration_date: i64,
    /// Source of the added boost
    source: ChatBoostSource,
};

/// This object represents a boost added to a chat or changed.
pub const ChatBoostUpdated = struct {
    /// Chat which was boosted
    chat: Chat,
    /// Information about the chat boost
    boost: ChatBoost,
};

/// This object represents a boost removed from a chat.
pub const ChatBoostRemoved = struct {
    /// Chat which was boosted
    chat: Chat,
    /// Unique identifier of the boost
    boost_id: []u8,
    /// Point in time (Unix timestamp) when the boost was removed
    remove_date: i64,
    /// Source of the removed boost
    source: ChatBoostSource,
};

/// This object represents a list of boosts added to a chat by a user.
pub const UserChatBoosts = struct {
    /// The list of boosts added to the chat by the user
    boosts: []ChatBoost,
};

/// Describes the connection of the bot with a business account.
pub const BusinessConnection = struct {
    /// Unique identifier of the business connection
    id: []u8,
    /// Business account user that created the business connection
    user: User,
    /// Identifier of a private chat with the user who created the business connection. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
    user_chat_id: i64,
    /// Date the connection was established in Unix time
    date: i64,
    /// True, if the bot can act on behalf of the business account in chats that were active in the last 24 hours
    can_reply: bool,
    /// True, if the connection is active
    is_enabled: bool,
};

/// This object is received when messages are deleted from a connected business account.
pub const BusinessMessagesDeleted = struct {
    /// Unique identifier of the business connection
    business_connection_id: []u8,
    /// Information about a chat in the business account. The bot may not have access to the chat or the corresponding user.
    chat: Chat,
    /// The list of identifiers of deleted messages in the chat of the business account
    message_ids: []i64,
};

/// Describes why a request was unsuccessful.
pub const ResponseParameters = struct {
    /// Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    migrate_to_chat_id: ?i64 = null,
    /// Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
    retry_after: ?i64 = null,
};

/// Represents a photo to be sent.
pub const InputMediaPhoto = struct {
    /// Type of the result, must be photo
    type: []u8,
    /// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    media: []u8,
    /// Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
    caption: ?[]u8 = null,
    /// Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
    parse_mode: ?[]u8 = null,
    /// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    caption_entities: ?[]MessageEntity = null,
    /// Optional. Pass True, if the caption must be shown above the message media
    show_caption_above_media: ?bool = null,
    /// Optional. Pass True if the photo needs to be covered with a spoiler animation
    has_spoiler: ?bool = null,
};

/// Represents a video to be sent.
pub const InputMediaVideo = struct {
    /// Type of the result, must be video
    type: []u8,
    /// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    media: []u8,
    /// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
    thumbnail: ?[]u8 = null,
    /// Optional. Cover for the video in the message. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    cover: ?[]u8 = null,
    /// Optional. Start timestamp for the video in the message
    start_timestamp: ?i64 = null,
    /// Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
    caption: ?[]u8 = null,
    /// Optional. Mode for parsing entities in the video caption. See formatting options for more details.
    parse_mode: ?[]u8 = null,
    /// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    caption_entities: ?[]MessageEntity = null,
    /// Optional. Pass True, if the caption must be shown above the message media
    show_caption_above_media: ?bool = null,
    /// Optional. Video width
    width: ?i64 = null,
    /// Optional. Video height
    height: ?i64 = null,
    /// Optional. Video duration in seconds
    duration: ?i64 = null,
    /// Optional. Pass True if the uploaded video is suitable for streaming
    supports_streaming: ?bool = null,
    /// Optional. Pass True if the video needs to be covered with a spoiler animation
    has_spoiler: ?bool = null,
};

/// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
pub const InputMediaAnimation = struct {
    /// Type of the result, must be animation
    type: []u8,
    /// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    media: []u8,
    /// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
    thumbnail: ?[]u8 = null,
    /// Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing
    caption: ?[]u8 = null,
    /// Optional. Mode for parsing entities in the animation caption. See formatting options for more details.
    parse_mode: ?[]u8 = null,
    /// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    caption_entities: ?[]MessageEntity = null,
    /// Optional. Pass True, if the caption must be shown above the message media
    show_caption_above_media: ?bool = null,
    /// Optional. Animation width
    width: ?i64 = null,
    /// Optional. Animation height
    height: ?i64 = null,
    /// Optional. Animation duration in seconds
    duration: ?i64 = null,
    /// Optional. Pass True if the animation needs to be covered with a spoiler animation
    has_spoiler: ?bool = null,
};

/// Represents an audio file to be treated as music to be sent.
pub const InputMediaAudio = struct {
    /// Type of the result, must be audio
    type: []u8,
    /// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    media: []u8,
    /// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
    thumbnail: ?[]u8 = null,
    /// Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing
    caption: ?[]u8 = null,
    /// Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
    parse_mode: ?[]u8 = null,
    /// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    caption_entities: ?[]MessageEntity = null,
    /// Optional. Duration of the audio in seconds
    duration: ?i64 = null,
    /// Optional. Performer of the audio
    performer: ?[]u8 = null,
    /// Optional. Title of the audio
    title: ?[]u8 = null,
};

/// Represents a general file to be sent.
pub const InputMediaDocument = struct {
    /// Type of the result, must be document
    type: []u8,
    /// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    media: []u8,
    /// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
    thumbnail: ?[]u8 = null,
    /// Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
    caption: ?[]u8 = null,
    /// Optional. Mode for parsing entities in the document caption. See formatting options for more details.
    parse_mode: ?[]u8 = null,
    /// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    caption_entities: ?[]MessageEntity = null,
    /// Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album.
    disable_content_type_detection: ?bool = null,
};

/// The paid media to send is a photo.
pub const InputPaidMediaPhoto = struct {
    /// Type of the media, must be photo
    type: []u8,
    /// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    media: []u8,
};

/// The paid media to send is a video.
pub const InputPaidMediaVideo = struct {
    /// Type of the media, must be video
    type: []u8,
    /// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    media: []u8,
    /// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
    thumbnail: ?[]u8 = null,
    /// Optional. Cover for the video in the message. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »
    cover: ?[]u8 = null,
    /// Optional. Start timestamp for the video in the message
    start_timestamp: ?i64 = null,
    /// Optional. Video width
    width: ?i64 = null,
    /// Optional. Video height
    height: ?i64 = null,
    /// Optional. Video duration in seconds
    duration: ?i64 = null,
    /// Optional. Pass True if the uploaded video is suitable for streaming
    supports_streaming: ?bool = null,
};
